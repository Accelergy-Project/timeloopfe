helpful_macros_ignore:
# =============================================================================
# Default buffer setup. Reference in the architecture file directly as a buffer
# top key.
# e.g. - name: buffer_name
#        <<: *default_buffer
#        attributes: {depth: 1024, type: SRAM}
# =============================================================================
- &default_buffer_vars
  class: dummy_storage # Timeloop doesn't care about the buffer class if 
                        # we're using Accelergy. Just use something.
  required_actions: [read, update, write, idle]
  attributes: {datawidth: 1}

# ASSUMPTION: Environment variable "TIMELOOP_ENABLE_FIRST_READ_ELISION 0" is
# set. This is NOT the default. It is set to be enabled within the
# preprocess_config.yaml file.
#
# When energy is paid for each action:
# Read-Only Data:
#  read: Each time a value is read from the buffer to a lower level
#  write: Each time a value is written to the buffer from an upper level
#  update: Never
#  Idle: FIXME, TODO leakage idle power
#
# Read/Write Data:
#  read: Each time a value is read from the buffer to a lower level and each
#  time a value is read from the buffer to an upper level.
#  write: Each time a value is written to the buffer from an upper level
#  update: Each time a value is written to the buffer from a lower level
#  idle: FIXME, TODO leakage idle power
#
# For read/write data, the number of reads always equals the number of updates.
# This is because all but the first update require reading the buffer first
# to update the value, and the last update incurs an extra read to send the
# value to the upper level.
#
# To model processing stages such as the ADC, DAC, and commuincation networks,
# we model the processing action (e.g. convert for an ADC) as a "read". This is
# because the read action is uniquely equal for read and read/write dataspaces.

# =============================================================================
# Helpful constraint macros.
# =============================================================================
- &dataspaces [Inputs, Outputs, Weights]
- &vars [N, P, Q, I, C, M, R, S, L, T, G] # Ruamel crashes if this comment is not here.


# This goes under the "temporal_constraints" key in an architecture element.
- &default_temporal_constraints # Do not rewrite the weights.
  factors: [C=1, M=1, R=1, S=1, L=1, T=1, G=1, N=1]
  permutation: [C, M, R, S, L, T]


# This goes under the "spatial_constraints" key in an architecture element.
# Disable permutation, XY mapping, networks
- &default_spatial_constraints
  permutation: *vars # Spatial permutation usually doesn't matter.
  no_link_transfer: *dataspaces # No link transfers unless explicitly enabled
  no_multicast_no_reduction: *dataspaces # No networks unless enabled
  split: 999 # Disable spatial XY by splitting at the max value. We're not using
             # Timeloop's 2D model in this architecture.

# This goes under the "temporal_constraints" key in an architecture element.
# It is specifically if you want this buffer to not be used for mapping;
# e.g. it doesn't reuse data between iterations, and it doesn't support
# loop nests.
- &temporal_dummy_constraints # Dummies do not support iteration or reuse.
  factors_only: []
  no_reuse: ["*"]
  permutation: *vars # Fix permutation to shrink mapspace.

# =============================================================================
# BUFFER MACROS:
#   Default buffer:   A buffer that is used in the usual way. e.g. input buffer
#   Processing stage: A "buffer" that only processes data and does not actually
#                     store it or support iteration. We use this to model the
#                     ADC, DAC, communication networks, etc.
#
# Reference in the architecture file directly as a buffer top key. The
# "<<<: *default_buffer" syntax merges in all the keys and subdictionaries from
# the default buffer. You can then override any of the keys or subdictionaries.
# (Use "<<: *default_buffer" to merge keys without hierarchically merging
# subdictionaries.)
#
# e.g. - name: buffer_name
#        <<<: *default_buffer
#        attributes: {depth: 1024}
#      - name: input_only_processing_stage_name
#        <<< *input_processing_stage
#        attributes: {depth: 1024}
# =============================================================================
- &default_buffer
  name: adsfadsjf
  <<<: *default_buffer_vars
  constraints:
    temporal: {<<: *default_temporal_constraints} 

- &processing_stage
  <<<: *default_buffer_vars
  attributes: {depth: INF}
  constraints:
    temporal: {<<: *temporal_dummy_constraints}

- &input_processing_stage
  <<<: *processing_stage
  constraints: {dataspace: {keep: [Inputs], bypass: [Outputs, Weights]}}

- &output_processing_stage
  <<<: *processing_stage
  constraints: {dataspace: {keep: [Outputs], bypass: [Inputs, Weights]}}

- &weight_processing_stage
  <<<: *processing_stage
  constraints: {dataspace: {keep: [Weights], bypass: [Inputs, Outputs]}}

- &input_output_processing_stage
  <<<: *processing_stage
  constraints: {dataspace: {keep: [Inputs, Outputs], bypass: [Weights]}}

# Applies default spatial constraints to the arch level
- &container_with_default_spatial_constraints
  constraints: {spatial: {<<: *default_spatial_constraints}}


attribute_macros_ignore:
  # These will be applied to analog array components
  pim_component_attributes: &pim_component_attributes
    rows: ROWS_PER_ARRAY
    cols: COLS_PER_ARRAY
    cols_active_at_once: N_COLUMNS // N_COLUMN_GROUPS
    cell_config: CELL_CONFIG
    average_input_value: AVERAGE_INPUT_VALUE
    average_cell_value: AVERAGE_WEIGHT_VALUE
    latency: ARRAY_LATENCY

  # These will be applied to the ADC
  adc_component_attributes: &adc_component_attributes
    <<: *pim_component_attributes
    resolution: ADC_RESOLUTION
    n_adcs: 4
    adc_action_share: ADC_ACTION_SHARE
